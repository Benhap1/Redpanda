// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension="
// @generated from file redpanda/api/console/v1alpha1/debug_bundle.proto (package redpanda.api.console.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message redpanda.api.console.v1alpha1.CreateDebugBundleRequest
 */
export class CreateDebugBundleRequest extends Message<CreateDebugBundleRequest> {
  /**
   * @generated from field: int32 controller_logs_size_limit_bytes = 1;
   */
  controllerLogsSizeLimitBytes = 0;

  /**
   * @generated from field: int32 cpu_profiler_wait_seconds = 2;
   */
  cpuProfilerWaitSeconds = 0;

  /**
   * TODO add validation 'YYYY-MM-DD', 'yesterday', or 'today'
   *
   * @generated from field: string logs_since = 3;
   */
  logsSince = "";

  /**
   * @generated from field: int32 logs_size_limit_bytes = 4;
   */
  logsSizeLimitBytes = 0;

  /**
   * TODO add validation 'YYYY-MM-DD', 'yesterday', or 'today'
   *
   * @generated from field: string logs_until = 5;
   */
  logsUntil = "";

  /**
   * @generated from field: int32 metrics_interval_seconds = 6;
   */
  metricsIntervalSeconds = 0;

  /**
   * @generated from field: repeated string partition = 7;
   */
  partition: string[] = [];

  constructor(data?: PartialMessage<CreateDebugBundleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.CreateDebugBundleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "controller_logs_size_limit_bytes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "cpu_profiler_wait_seconds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "logs_since", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "logs_size_limit_bytes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "logs_until", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "metrics_interval_seconds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "partition", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDebugBundleRequest {
    return new CreateDebugBundleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDebugBundleRequest {
    return new CreateDebugBundleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDebugBundleRequest {
    return new CreateDebugBundleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDebugBundleRequest | PlainMessage<CreateDebugBundleRequest> | undefined, b: CreateDebugBundleRequest | PlainMessage<CreateDebugBundleRequest> | undefined): boolean {
    return proto3.util.equals(CreateDebugBundleRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.CreateDebugBundleResponse
 */
export class CreateDebugBundleResponse extends Message<CreateDebugBundleResponse> {
  /**
   * UUID
   *
   * @generated from field: string job_id = 1;
   */
  jobId = "";

  constructor(data?: PartialMessage<CreateDebugBundleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.CreateDebugBundleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDebugBundleResponse {
    return new CreateDebugBundleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDebugBundleResponse {
    return new CreateDebugBundleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDebugBundleResponse {
    return new CreateDebugBundleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDebugBundleResponse | PlainMessage<CreateDebugBundleResponse> | undefined, b: CreateDebugBundleResponse | PlainMessage<CreateDebugBundleResponse> | undefined): boolean {
    return proto3.util.equals(CreateDebugBundleResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.GetDebugBundleStatusRequest
 */
export class GetDebugBundleStatusRequest extends Message<GetDebugBundleStatusRequest> {
  constructor(data?: PartialMessage<GetDebugBundleStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.GetDebugBundleStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDebugBundleStatusRequest {
    return new GetDebugBundleStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDebugBundleStatusRequest {
    return new GetDebugBundleStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDebugBundleStatusRequest {
    return new GetDebugBundleStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDebugBundleStatusRequest | PlainMessage<GetDebugBundleStatusRequest> | undefined, b: GetDebugBundleStatusRequest | PlainMessage<GetDebugBundleStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetDebugBundleStatusRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse
 */
export class GetDebugBundleStatusResponse extends Message<GetDebugBundleStatusResponse> {
  /**
   * @generated from field: string job_id = 1;
   */
  jobId = "";

  /**
   * @generated from field: redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse.Status status = 2;
   */
  status = GetDebugBundleStatusResponse_Status.UNSPECIFIED;

  constructor(data?: PartialMessage<GetDebugBundleStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(GetDebugBundleStatusResponse_Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDebugBundleStatusResponse {
    return new GetDebugBundleStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDebugBundleStatusResponse {
    return new GetDebugBundleStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDebugBundleStatusResponse {
    return new GetDebugBundleStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDebugBundleStatusResponse | PlainMessage<GetDebugBundleStatusResponse> | undefined, b: GetDebugBundleStatusResponse | PlainMessage<GetDebugBundleStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetDebugBundleStatusResponse, a, b);
  }
}

/**
 * @generated from enum redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse.Status
 */
export enum GetDebugBundleStatusResponse_Status {
  /**
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATUS_RUNNING = 1;
   */
  RUNNING = 1,

  /**
   * @generated from enum value: STATUS_SUCCESS = 2;
   */
  SUCCESS = 2,

  /**
   * @generated from enum value: STATUS_ERROR = 3;
   */
  ERROR = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(GetDebugBundleStatusResponse_Status)
proto3.util.setEnumType(GetDebugBundleStatusResponse_Status, "redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse.Status", [
  { no: 0, name: "STATUS_UNSPECIFIED" },
  { no: 1, name: "STATUS_RUNNING" },
  { no: 2, name: "STATUS_SUCCESS" },
  { no: 3, name: "STATUS_ERROR" },
]);

/**
 * @generated from message redpanda.api.console.v1alpha1.DeleteDebugBundleRequest
 */
export class DeleteDebugBundleRequest extends Message<DeleteDebugBundleRequest> {
  /**
   * @generated from field: string job_id = 1;
   */
  jobId = "";

  constructor(data?: PartialMessage<DeleteDebugBundleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.DeleteDebugBundleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDebugBundleRequest {
    return new DeleteDebugBundleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDebugBundleRequest {
    return new DeleteDebugBundleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDebugBundleRequest {
    return new DeleteDebugBundleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDebugBundleRequest | PlainMessage<DeleteDebugBundleRequest> | undefined, b: DeleteDebugBundleRequest | PlainMessage<DeleteDebugBundleRequest> | undefined): boolean {
    return proto3.util.equals(DeleteDebugBundleRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.DeleteDebugBundleResponse
 */
export class DeleteDebugBundleResponse extends Message<DeleteDebugBundleResponse> {
  constructor(data?: PartialMessage<DeleteDebugBundleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.DeleteDebugBundleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDebugBundleResponse {
    return new DeleteDebugBundleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDebugBundleResponse {
    return new DeleteDebugBundleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDebugBundleResponse {
    return new DeleteDebugBundleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDebugBundleResponse | PlainMessage<DeleteDebugBundleResponse> | undefined, b: DeleteDebugBundleResponse | PlainMessage<DeleteDebugBundleResponse> | undefined): boolean {
    return proto3.util.equals(DeleteDebugBundleResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.DeleteDebugBundleFileRequest
 */
export class DeleteDebugBundleFileRequest extends Message<DeleteDebugBundleFileRequest> {
  /**
   * @generated from field: string file = 1;
   */
  file = "";

  constructor(data?: PartialMessage<DeleteDebugBundleFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.DeleteDebugBundleFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDebugBundleFileRequest {
    return new DeleteDebugBundleFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDebugBundleFileRequest {
    return new DeleteDebugBundleFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDebugBundleFileRequest {
    return new DeleteDebugBundleFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDebugBundleFileRequest | PlainMessage<DeleteDebugBundleFileRequest> | undefined, b: DeleteDebugBundleFileRequest | PlainMessage<DeleteDebugBundleFileRequest> | undefined): boolean {
    return proto3.util.equals(DeleteDebugBundleFileRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.DeleteDebugBundleFileResponse
 */
export class DeleteDebugBundleFileResponse extends Message<DeleteDebugBundleFileResponse> {
  constructor(data?: PartialMessage<DeleteDebugBundleFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.DeleteDebugBundleFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDebugBundleFileResponse {
    return new DeleteDebugBundleFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDebugBundleFileResponse {
    return new DeleteDebugBundleFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDebugBundleFileResponse {
    return new DeleteDebugBundleFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDebugBundleFileResponse | PlainMessage<DeleteDebugBundleFileResponse> | undefined, b: DeleteDebugBundleFileResponse | PlainMessage<DeleteDebugBundleFileResponse> | undefined): boolean {
    return proto3.util.equals(DeleteDebugBundleFileResponse, a, b);
  }
}

